---
alwaysApply: true
description: Project structure and development workflow standards
---

# Project Structure and Development Workflow

## Project Organization
This project follows a modern React/TypeScript/PostgreSQL full-stack architecture. Key files and directories:

- [src/](mdc:src/) - Main source code directory
- [src/components/](mdc:src/components/) - React components organized by feature
- [src/hooks/](mdc:src/hooks/) - Custom React hooks
- [src/services/](mdc:src/services/) - API services and business logic
- [src/types/](mdc:src/types/) - TypeScript type definitions
- [src/__tests__/](mdc:src/__tests__/) - Test files
- [package.json](mdc:package.json) - Dependencies and scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration

## Development Standards
- Use TypeScript for all new code
- Follow React functional component patterns with hooks
- Implement proper error handling and loading states
- Write tests for all new functionality
- Use consistent naming conventions (camelCase for variables, PascalCase for components)

## Code Quality Tools
- ESLint and Prettier for code formatting
- Jest and React Testing Library for testing
- TypeScript strict mode enabled
- Pre-commit hooks for code quality checks

## Database Integration
- Uses Supabase for PostgreSQL database
- Database schema defined in [table_schema.md](mdc:table_schema.md)
- Type-safe database operations with generated types

## Key Development Principles
1. **Type Safety**: Always use proper TypeScript types
2. **Error Handling**: Implement comprehensive error boundaries and validation
3. **Testing**: Write tests for critical functionality
4. **Security**: Validate inputs and implement proper authentication
5. **Performance**: Optimize components and database queries
6. **Accessibility**: Include ARIA attributes and semantic HTML

## File Naming Conventions
- Components: PascalCase (e.g., `UserProfile.tsx`)
- Hooks: camelCase starting with 'use' (e.g., `useAuth.ts`)
- Services: camelCase with .service.ts suffix (e.g., `draft.service.ts`)
- Types: camelCase with .ts extension (e.g., `draft.ts`)
- Tests: Same as source file with .test.ts suffix